---
description: 
globs: 
alwaysApply: false
---
---
description: The instructions for the development of this app.
---

# Project Overview
You are building a web app that allows users to input a person's discord profile URL, and it retrieves all publicly available information about that person. This is the server side of the project. The client side is initiated else where, but you will be using the same instructions and functionalities.
You will be using Vite.js, Express.js, React, Shadcn, Tailwind, Lucid icon.

---

# Core Functionalities
1. User Input Interface
   1. Create a clean homepage with a centered search bar  
   2. Implement a Discord URL input field using Shadcn UI components  
   3. Add a "Fetch Profile" button with a Discord icon from Lucide  
   4. Add basic validation to ensure the input is a valid Discord profile URL  

2. Backend API Setup
   1. Create an Express.js server with a dedicated endpoint for profile fetching  
   2. Set up CORS to allow requests from the frontend  
   3. Implement error handling middleware  
   4. Configure environment variables for Discord API credentials  
   5. Create a route handler for the profile fetching endpoint  

3. Discord API Integration
   1. Implement Discord API client using *discord.js*  
   2. Extract user ID from the provided Discord profile URL  
   3. Make authenticated requests to Discord's API endpoints  
   4. Handle rate limiting and API errors  
   5. Parse and transform the API response for frontend consumption  

4. Profile Data Retrieval
   1. Send the profile URL from the frontend to the backend  
   2. Process the URL to extract necessary identifiers  
   3. Fetch the following data points from Discord:  
      - Username  
      - User avatar  
      - "About Me" section  
      - Online status  
      - Current activity/status message  
   4. Return structured JSON data to the frontend  

5. Loading State Management
   1. Implement a loading state when the fetch request is in progress  
   2. Create an animated loading spinner using Shadcn UI  
   3. Disable the fetch button during loading  
   4. Show appropriate loading messages  

6. Profile Display Component
   1. Design a card-based layout for displaying user information  
   2. Create a profile header with avatar and username  
   3. Display online status with appropriate color indicators  
   4. Show the "About Me" section with proper formatting  
   5. List current activity/status if available  

7. Error Handling System
   1. Create error boundary components for React  
   2. Implement toast notifications for API errors  
   3. Display user-friendly error messages for different scenarios:  
      - Invalid URL  
      - User not found  
      - API rate limiting  
      - Network errors  
   4. Add retry functionality for failed requests  

8. Responsive Design Implementation
   1. Use Tailwind CSS breakpoints for different screen sizes  
   2. Implement a mobile-first approach  
   3. Adjust card layout for smaller screens  
   4. Ensure proper spacing and readability on all devices  

9. Caching Mechanism
   1. Implement browser local storage for caching fetched profiles  
   2. Store profile data with timestamps  
   3. Check cache before making new API requests  
   4. Add cache invalidation after a certain time period  
   5. Create a function to clear cache manually  

10. History Feature
   1. Track recently viewed profiles  
   2. Create a "Recent Searches" section  
   3. Store search history in local storage  
   4. Allow users to click on recent searches to view profiles again  
   5. Add functionality to clear search history  

11. Data Refresh Functionality
   1. Add a refresh button on each profile card  
   2. Implement logic to fetch fresh data from Discord  
   3. Update the "Last Updated" timestamp  
   4. Show a mini-loader during refresh operations  
   5. Handle refresh errors gracefully  


---

# Doc
## Documentation on how to user discord.js to fetch discord user data
CODE EXAMPLE:
```
import { Client, GatewayIntentBits, User, GuildMember, Presence } from 'discord.js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Define interface for user data
interface DiscordUserData {
    username: string;
    avatarUrl: string | null;
    status: string;
    activity: {
        type: string;
        name: string;
    } | null;
}

export class DiscordUserFetcher {
    private client: Client;

    constructor() {
        // Initialize Discord client with necessary intents
        this.client = new Client({
            intents: [
                GatewayIntentBits.Guilds,
                GatewayIntentBits.GuildMembers,
                GatewayIntentBits.GuildPresences,
                GatewayIntentBits.GuildMessages
            ]
        });
    }

    public async fetchUserData(username: string): Promise<DiscordUserData> {
        try {
            // Login to Discord
            await this.client.login(process.env.DISCORD_BOT_TOKEN);

            // Wait for client to be ready
            await new Promise<void>((resolve) => {
                this.client.once('ready', () => resolve());
            });

            // Find the user by username
            const member = await this.findUserByUsername(username);
            if (!member) {
                throw new Error(`User ${username} not found`);
            }

            // Fetch user data
            const userData: DiscordUserData = {
                username: member.user.username,
                avatarUrl: member.user.displayAvatarURL({ size: 256 }),
                status: member.presence?.status || 'offline',
                activity: member.presence?.activities[0] ? {
                    type: member.presence.activities[0].type.toString(),
                    name: member.presence.activities[0].name
                } : null
            };

            return userData;
        } catch (error) {
            console.error('Error fetching user data:', error);
            throw error;
        } finally {
            // Logout from Discord
            this.client.destroy();
        }
    }

    private async findUserByUsername(username: string): Promise<GuildMember | null> {
        const guilds = await this.client.guilds.fetch();
        
        for (const guild of guilds.values()) {
            const fullGuild = await this.client.guilds.fetch(guild.id);
            const members = await fullGuild.members.fetch();
            const member = members.find((m: GuildMember) => m.user.username.toLowerCase() === username.toLowerCase());
            if (member) {
                return member;
            }
        }
        
        return null;
    }
}
```

---

# Current File Structure
xxxx